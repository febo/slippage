/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
} from '@solana/web3.js';
import { SLIPPAGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export type AssertInstruction<
  TProgram extends string = typeof SLIPPAGE_PROGRAM_ADDRESS,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTokenAccount extends string
        ? ReadonlyAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      ...TRemainingAccounts,
    ]
  >;

export type AssertInstructionData = { amount: bigint };

export type AssertInstructionDataArgs = { amount: number | bigint };

export function getAssertInstructionDataEncoder(): Encoder<AssertInstructionDataArgs> {
  return getStructEncoder([['amount', getU64Encoder()]]);
}

export function getAssertInstructionDataDecoder(): Decoder<AssertInstructionData> {
  return getStructDecoder([['amount', getU64Decoder()]]);
}

export function getAssertInstructionDataCodec(): Codec<
  AssertInstructionDataArgs,
  AssertInstructionData
> {
  return combineCodec(
    getAssertInstructionDataEncoder(),
    getAssertInstructionDataDecoder()
  );
}

export type AssertInput<TAccountTokenAccount extends string = string> = {
  /** Token account to assert the amount */
  tokenAccount: Address<TAccountTokenAccount>;
  amount: AssertInstructionDataArgs['amount'];
};

export function getAssertInstruction<TAccountTokenAccount extends string>(
  input: AssertInput<TAccountTokenAccount>
): AssertInstruction<typeof SLIPPAGE_PROGRAM_ADDRESS, TAccountTokenAccount> {
  // Program address.
  const programAddress = SLIPPAGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.tokenAccount)],
    programAddress,
    data: getAssertInstructionDataEncoder().encode(
      args as AssertInstructionDataArgs
    ),
  } as AssertInstruction<typeof SLIPPAGE_PROGRAM_ADDRESS, TAccountTokenAccount>;

  return instruction;
}

export type ParsedAssertInstruction<
  TProgram extends string = typeof SLIPPAGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Token account to assert the amount */
    tokenAccount: TAccountMetas[0];
  };
  data: AssertInstructionData;
};

export function parseAssertInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssertInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenAccount: getNextAccount(),
    },
    data: getAssertInstructionDataDecoder().decode(instruction.data),
  };
}
