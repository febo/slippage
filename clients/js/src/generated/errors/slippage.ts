/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { SLIPPAGE_PROGRAM_ADDRESS } from '../programs';

/** SlippageExceeded: Slippage exceeded */
export const SLIPPAGE_ERROR__SLIPPAGE_EXCEEDED = 0x0; // 0

export type SlippageError = typeof SLIPPAGE_ERROR__SLIPPAGE_EXCEEDED;

let slippageErrorMessages: Record<SlippageError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  slippageErrorMessages = {
    [SLIPPAGE_ERROR__SLIPPAGE_EXCEEDED]: `Slippage exceeded`,
  };
}

export function getSlippageErrorMessage(code: SlippageError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (slippageErrorMessages as Record<SlippageError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isSlippageError<TProgramErrorCode extends SlippageError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    SLIPPAGE_PROGRAM_ADDRESS,
    code
  );
}
